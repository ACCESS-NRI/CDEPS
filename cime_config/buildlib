#!/usr/bin/env python

"""
build cime component model library.   This buildlib script is used by all CDEPS components.
"""

import sys, os

_CIMEROOT = os.path.join(os.path.dirname(os.path.abspath(__file__)), "..","..","..","..", "..")
sys.path.append(os.path.join(_CIMEROOT, "scripts", "Tools"))

from standard_script_setup import *
from CIME.buildlib import parse_input
from CIME.case import Case
from CIME.utils import run_cmd, symlink_force
from CIME.build import get_standard_cmake_args

logger = logging.getLogger(__name__)

def buildlib(bldroot, libroot, case, compname=None):
    if bldroot.endswith("obj") and not compname:
        compname = os.path.basename(os.path.abspath(os.path.join(bldroot,os.pardir)))
    print "HERE compname is {} libroot={} bldroot={}".format(compname, libroot, bldroot)

    if case.get_value("DEBUG"):
        strdebug = "debug"
    else:
        strdebug = "nodebug"
    if case.get_value("BUILD_THREADED"):
        strthread = "threads"
    else:
        strthread = "nothreads"

    sharedpath = os.path.join(case.get_value("COMPILER"),
                              case.get_value("MPILIB"), strdebug, strthread, "nuopc")


    if compname:
        run_cmd("make d{}".format(compname), from_dir=bldroot, verbose=True)
        libname = "lib{}.a".format(compname)
        dlibname = "libd{}.a".format(compname)
        symlink_force(os.path.join(bldroot,dlibname), os.path.join(libroot,libname))
    else:
        logger.info("Running cmake for CDEPS")
        srcpath = os.path.join(case.get_value("CIMEROOT"),"src","components","cdeps")

        cmake_flags = get_standard_cmake_args(case, os.path.join(sharedpath,"cdeps"), shared_lib=True)
        cmake_flags += " -DCMAKE_INSTALL_PREFIX={} ".format(libroot)
        cmake_flags += " -DLIBROOT={} ".format(libroot) + srcpath
        logger.info("cmake_flags {}".format(cmake_flags))
        run_cmd("cmake {} ".format(cmake_flags), from_dir=bldroot, verbose=True)
        run_cmd("make install", from_dir=bldroot, verbose=True)

        # Link the CDEPS component directories to the location expected by cime
        for comp in ("atm", "lnd", "ice", "ocn", "rof", "wav"):
            compname = case.get_value("COMP_{}".format(comp.upper()))
            comppath = os.path.join(case.get_value("EXEROOT"),comp,"obj")
            if compname == "d"+comp:
                if not os.path.islink(comppath):
                    os.rmdir(comppath)
                symlink_force(os.path.join(bldroot,compname), comppath)

def _main_func(args):
    caseroot, libroot, bldroot = parse_input(args)
    with Case(caseroot) as case:
        buildlib(bldroot, libroot, case)

if __name__ == "__main__":
    _main_func(sys.argv)
