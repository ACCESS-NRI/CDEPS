# This is a basic workflow to help you get started with Actions
name: extbuild
# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # Build the ESMF library, if the cache contains a previous build it will be used instead
  esmf-build:
    runs-on: ubuntu-latest
    env:
      CC: mpicc
      FC: mpifort
      CXX: mpicxx
      CPPFLAGS: "-I/usr/include -I/usr/local/include"
    steps:
      - uses: actions/checkout@v2
      - name: Cache ESMF
        id: cache-esmf
        uses: actions/cache@v2
        with:
          path: ESMF
          key: ${{ runner.os }}-ESMF
      - name: ESMF build
        if: steps.cache-esmf.outputs.cache-hit != 'true'
        run: |
          sudo apt-get install gfortran wget openmpi-bin libopenmpi-dev
          wget https://github.com/esmf-org/esmf/archive/ESMF_8_1_0_beta_snapshot_25.tar.gz
          tar -xzvf ESMF_8_1_0_beta_snapshot_25.tar.gz
          pushd esmf-ESMF_8_1_0_beta_snapshot_25
          export ESMF_DIR=`pwd`
          export ESMF_COMM=openmpi
          export ESMF_YAMLCPP="internal"
          export ESMF_INSTALL_PREFIX=$ESMF_DIR/../ESMF
          export ESMF_BOPT=g
          make
          make install
          popd

  # Build the pnetcdf library, if the cache contains a previous build it will be used instead
  pnetcdf-build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    env:
      CC: mpicc
      FC: mpifort
      CPPFLAGS: "-I/usr/include -I/usr/local/include"
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      # Runs a single command using the runners shell
      - name: Installs
        run: sudo apt-get install gfortran wget openmpi-bin libopenmpi-dev
      - name: Cache pnetcdf
        id: cache-pnetcdf
        uses: actions/cache@v2
        with:
          path: pnetcdf
          key: ${{ runner.os }}-pnetcdf
      - name: pnetcdf build
        if: steps.cache-pnetcdf.outputs.cache-hit != 'true'
        run: |
          wget https://parallel-netcdf.github.io/Release/pnetcdf-1.12.1.tar.gz
          tar -xzvf pnetcdf-1.12.1.tar.gz
          ls -l
          pushd pnetcdf-1.12.1
          ./configure --prefix=`pwd`/pnetcdf --enable-shared --disable-cxx
          make
          sudo make install
          popd

  # Build the netcdf library, if the cache contains a previous build it will be used instead
  netcdf-fortran-build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    env:
      CC: mpicc
      FC: mpifort
      CPPFLAGS: "-I/usr/include -I/usr/local/include"
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      # Runs a single command using the runners shell
      - name: Installs
        run: sudo apt-get install gfortran wget openmpi-bin libopenmpi-dev netcdf-bin libnetcdf-dev
      - name: Cache netcdf-fortran
        id: cache-netcdf-fortran
        uses: actions/cache@v2
        with:
          path: netcdf-fortran
          key: ${{ runner.os }}-netcdf-fortran
      - name: netcdf fortran build
        if: steps.cache-netcdf-fortran.outputs.cache-hit != 'true'
        run: |
          ncdump --version
          wget https://github.com/Unidata/netcdf-fortran/archive/v4.5.2.tar.gz
          tar -xzvf v4.5.2.tar.gz
          ls -l
          pushd netcdf-fortran-4.5.2
          ./configure --prefix=`pwd`/../netcdf-fortran
          make
          make install
          popd

# Build the PIO library, if the cache contains a previous build it will be used
  pio-build:
    runs-on: ubuntu-latest
    needs: [pnetcdf-build, netcdf-fortran-build]
    env:
      CC: mpicc
      FC: mpifort
      CPPFLAGS: "-I/usr/include -I/usr/local/include"
    steps:
      - uses: actions/checkout@v2
      - name: Installs
        run: sudo apt-get install gfortran wget openmpi-bin libopenmpi-dev netcdf-bin libnetcdf-dev
      - name: Cache PIO
        id: cache-PIO
        uses: actions/cache@v2
        with:
          path: pio
          key: ${{ runner.os }}-pio
      - name: Build PIO
        if: steps.cache-PIO.outputs.cache-hit != 'true'
        run: |
          wget https://github.com/NCAR/ParallelIO/releases/download/pio_2_5_1/pio-2.5.1.tar.gz
          tar -xzvf pio-2.5.1.tar.gz
          mkdir build
          pushd build
          cmake -Wno-dev -DNetCDF_C_LIBRARY=/usr/lib/x86_64-linux-gnu/libnetcdf.so -DNetCDF_C_INCLUDE_DIR=/usr/include -DCMAKE_PREFIX_PATH=/usr -DCMAKE_INSTALL_PREFIX=../pio -DPIO_HDF5_LOGGING=On -DPIO_USE_MALLOC=On -DPIO_ENABLE_LOGGING=On -DPIO_ENABLE_TIMING=Off -DNetCDF_Fortran_PATH=../netcdf-fortran -DPnetCDF_PATH=../pnetcdf../pio-2.5.1
          make VERBOSE=1
          make install
          popd
