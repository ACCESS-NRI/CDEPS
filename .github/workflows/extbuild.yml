# This is a workflow to compile the cdeps source without cime
name: extbuild
# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build-cdeps:
    runs-on: ubuntu-latest
    env:
      CC: mpicc
      FC: mpifort
      CXX: mpicxx
      CPPFLAGS: "-I/usr/include -I/usr/local/include"
      # Versions of all dependencies can be updated here
      ESMF_VERSION: v8.4.0
      PNETCDF_VERSION: checkpoint.1.12.3
      NETCDF_FORTRAN_VERSION: v4.5.4
      # These should match in number
      PIO_VERSION: pio2_5_10
    steps:
      - id: load-env
        run: |
          sudo apt-get update
          sudo apt-get install gfortran wget openmpi-bin netcdf-bin libopenmpi-dev libnetcdf-dev autotools-dev autoconf
      - id: cache-pnetcdf
        uses: actions/cache@v3
        with:
          path: ~/pnetcdf
          key: ${{ runner.os }}-${{ env.PNETCDF_VERSION}}-pnetcdf

      - id: checkout-pnetcdf
        uses: actions/checkout@v3
        with:
          repository: Parallel-NetCDF/PnetCDF
          path: pnetcdf-src
          ref: ${{ env.PNETCDF_VERSION }}
      - name: pnetcdf build
        if: steps.cache-pnetcdf.outputs.cache-hit != 'true'
        run: |
          pushd pnetcdf-src
          autoreconf -i
          ./configure --prefix=$HOME/pnetcdf --enable-shared --disable-cxx
          make
          make install
          popd
      - name: Cache netcdf-fortran
        id: cache-netcdf-fortran
        uses: actions/cache@v3
        with:
          path: ~/netcdf-fortran
          key: ${{ runner.os }}-${{ env.NETCDF_FORTRAN_VERSION }}-netcdf-fortran
      - id: checkout-netcdf-fortran
        uses: actions/checkout@v3
        with:
          repository: Unidata/netcdf-fortran
          path: netcdf-fortran-src
          ref: ${{ env.NETCDF_FORTRAN_VERSION }}
      - name: netcdf fortran build
        if: steps.cache-netcdf-fortran.outputs.cache-hit != 'true'
        run: |
          sudo apt-get install libnetcdf-dev
          pushd netcdf-fortran-src
          ./configure --prefix=$HOME/netcdf-fortran
          make
          make install

      - name: Cache PIO
        id: cache-PIO
        uses: actions/cache@v2
        with:
          path: ~/pio
          key: ${{ runner.os }}-${{ env.PIO_VERSION }}.pio
          restore-keys: |
            ${{ runner.os }}-${{ env.NETCDF_FORTRAN_VERSION }}-netcdf-fortran
            ${{ runner.os }}-${{ env.PNETCDF_VERSION }}-pnetcdf
      - id: checkout-pio
        uses: actions/checkout@v3
        with:
          repository: NCAR/ParallelIO
          path: parallelio-src
          ref: ${{ env.PIO_VERSION }}
      - name: Build PIO
        if: steps.cache-PIO.outputs.cache-hit != 'true'
        run: |
          mkdir build-pio
          pushd build-pio
          cmake -Wno-dev -DNetCDF_C_LIBRARY=/usr/lib/x86_64-linux-gnu/libnetcdf.so -DNetCDF_C_INCLUDE_DIR=/usr/include -DCMAKE_PREFIX_PATH=/usr -DCMAKE_INSTALL_PREFIX=$HOME/pio -DPIO_HDF5_LOGGING=Off -DPIO_ENABLE_EXAMPLES=Off -DPIO_ENABLE_LOGGING=Off -DPIO_ENABLE_TIMING=Off -DPnetCDF_PATH=$HOME/pnetcdf -DNetCDF_Fortran_LIBRARY=$HOME/netcdf-fortran/lib -DNetCDF_Fortran_INCLUDE_DIR=$HOME/netcdf-fortran/include ../parallelio-src
          make VERBOSE=1
          make install
          popd
      - id: cache-esmf
        uses: actions/cache@v3
        with:
          path: ~/ESMF
          key: ${{ runner.os }}-${{ env.ESMF_VERSION }}-ESMF
      - id: checkout-ESMF
        uses: actions/checkout@v3
        with:
          repository: esmf-org/esmf
          path: esmf-src
          ref: ${{ env.ESMF_VERSION }}
      - id: build-ESMF
        if: steps.cache-esmf.outputs.cache-hit != 'true'
        run: |
          pushd esmf-src
          export PATH=$PATH:$HOME/netcdf-fortran/bin:$HOME/pnetcdf/bin
          export ESMF_DIR=`pwd`
          export ESMF_COMM=openmpi
          export ESMF_YAMLCPP="internal"
          export ESMF_INSTALL_PREFIX=$HOME/ESMF
          export ESMF_BOPT=g
          export ESMF_NETCDF=nc-config
          export ESMF_NFCONFIG=nf-config
          export ESMF_PNETCDF=pnetcdf-config
          export ESMF_PIO=external
          export ESMF_PIO_LIBPATH=$HOME/pio/lib
          export ESMF_PIO_INCLUDE=$HOME/pio/include
          make
          make install
          popd

      - id: checkout-CDEPS
        uses: actions/checkout@v3
      - name: Build CDEPS
        run: |
          export ESMFMKFILE=$HOME/ESMF/lib/libg/Linux.gfortran.64.openmpi.default/esmf.mk
          export PIO=$HOME/pio
          export SRC_ROOT=
          git submodule init
          git submodule update
          mkdir build-cdeps
          pushd build-cdeps
          cmake -DCMAKE_BUILD_TYPE=DEBUG -DCMAKE_Fortran_FLAGS="-g -Wall -ffree-form -ffree-line-length-none  -fallow-argument-mismatch " ../
          make VERBOSE=1
          popd
